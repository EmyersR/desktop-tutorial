getwd()
source("~/Documents/GitHub/desktop-tutorial/scripts/scripts:01_compare_bed.R")
source("~/Documents/GitHub/desktop-tutorial/scripts/02_chr_summary.R")
source("~/Documents/GitHub/desktop-tutorial/scripts/01_import_groseq.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
source("~/Documents/GitHub/desktop-tutorial/scripts/01_import_groseq.R")
source("~/Documents/GitHub/desktop-tutorial/scripts/01_import_groseq.R")
dir("data/GROseq/MCF7", full.names = TRUE)
dir("data/GROseq/MCF10A", full.names = TRUE)
file.info("data/GROseq/MCF7/GSE96859_MCF7_GROseq_Untreated_PlusStrand.bw")$size
file.info("data/GROseq/MCF7/GSE96859_MCF7_GROseq_Untreated_MinusStrand.bw")$size
file.info("data/GROseq/MCF10A/GSE96859_MCF10A_GROseq_Untreated_PlusStrand.bw")$size
file.info("data/GROseq/MCF10A/GSE96859_MCF10A_GROseq_Untreated_MinusStrand.bw")$size
dir("data/GROseq/MCF10A", full.names = TRUE)
file.info("data/GROseq/MCF10A/GSE96859_MCF10A_GROseq_Untreated_PlusStrand.bw")$size
file.info("data/GROseq/MCF10A/GSE96859_MCF10A_GROseq_Untreated_MinusStrand.bw")$size
source("~/Documents/GitHub/desktop-tutorial/scripts/01_import_groseq.R")
dir.create("analysis", showWarnings = FALSE)
dir.create("data/raw/GROseq", recursive = TRUE, showWarnings = FALSE)
dir.create("data/raw/ChIPseq", recursive = TRUE, showWarnings = FALSE)
dir.create("data/processed", recursive = TRUE, showWarnings = FALSE)
dir.create("results", showWarnings = FALSE)
dir.create("scripts", showWarnings = FALSE)
dir.create("docs", showWarnings = FALSE)
dir.create("reports", showWarnings = FALSE)
setwd("~/Documents/GitHub/desktop-tutorial")
getwd()
# Run GroHMM to detect nascent transcripts
calls_mcf7   <- detectTranscripts(cov_mcf7, threshold = 2, maxLen = 50000L)
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if (!requireNamespace("groHMM", quietly = TRUE)) BiocManager::install("groHMM", ask = FALSE)
library(groHMM)
exists("detectTranscripts", where = asNamespace("groHMM"))
# should return TRUE
library(groHMM)
library(GenomicRanges)
library(rtracklayer)
library(groHMM)
source("scripts/03_grohmm_calls.R")
getwd()
file.exists("scripts/03_grohmm_calls.R")
library(GenomicRanges)
library(rtracklayer)
library(groHMM)
source("scripts/03_grohmm_calls.R")
install.packages(c("tidyverse","readr"))
library(rtracklayer); library(GenomicRanges); library(tidyverse); library(readr)
list.files("data/GROseq/MCF7", full.names = TRUE)
list.files("data/GROseq/MCF10A", full.names = TRUE)
source("~/Documents/GitHub/desktop-tutorial/scripts/01_import_groseq.R")
list.files("scripts", full.names = TRUE)
writeLines(c(
"# 01_import_groseq.R — Import GRO-Seq BigWig files and save GRanges",
"",
"library(rtracklayer)",
"library(GenomicRanges)",
"library(tidyverse)",
"",
"# ---- Define paths (BigWig) ----",
"mcf7_bw   <- list.files(\"data/GROseq/MCF7\",   pattern=\"\\\\.bw$\", full.names=TRUE, ignore.case=TRUE)",
"mcf10a_bw <- list.files(\"data/GROseq/MCF10A\", pattern=\"\\\\.bw$\", full.names=TRUE, ignore.case=TRUE)",
"",
"if (length(mcf7_bw) == 0 || length(mcf10a_bw) == 0) {",
"  stop(\"❌ Missing BigWig files in data/GROseq/MCF7 or data/GROseq/MCF10A\")",
"}",
"",
"# ---- Import + combine strands ----",
"import_bw_pair <- function(bw_files) {",
"  gr_list <- lapply(bw_files, rtracklayer::import, format = \"BigWig\")",
"  combined <- reduce(do.call(c, gr_list))",
"  combined",
"}",
"",
"mcf7   <- import_bw_pair(mcf7_bw)",
"mcf10a <- import_bw_pair(mcf10a_bw)",
"",
"# ---- Quick QC ----",
"qc <- tibble(",
"  sample       = c(\"MCF7\",\"MCF10A\"),",
"  n_regions    = c(length(mcf7), length(mcf10a)),",
"  median_width = c(median(width(mcf7)), median(width(mcf10a)))",
")",
"",
"# ---- Save outputs ----",
"dir.create(\"data/processed\", recursive = TRUE, showWarnings = FALSE)",
"saveRDS(mcf7,   \"data/processed/mcf7_granges.rds\")",
"saveRDS(mcf10a, \"data/processed/mcf10a_granges.rds\")",
"readr::write_csv(qc, \"data/processed/groseq_qc_summary.csv\")",
"",
"message(\"✅ GRO-Seq BigWig import complete — GRanges saved to data/processed/\")"
), "scripts/01_import_groseq.R")
head(readLines("scripts/01_import_groseq.R"), 6)
grep("BED files", readLines("scripts/01_import_groseq.R"))  # should print integer(0)
source("scripts/01_import_groseq.R")
library(rtracklayer)
library(GenomicRanges)
library(tidyverse)
library(readr)
# 1) point to your BW files (we saw they’re here)
mcf7_bw   <- list.files("data/GROseq/MCF7",   pattern="\\.bw$", full.names = TRUE)
mcf10a_bw <- list.files("data/GROseq/MCF10A", pattern="\\.bw$", full.names = TRUE)
# 2) robust importer that grabs minus/plus explicitly and returns a single GRanges
import_bw_pair <- function(bw_files) {
bw_minus <- bw_files[grepl("minus", bw_files, ignore.case = TRUE)]
bw_plus  <- bw_files[grepl("plus",  bw_files, ignore.case = TRUE)]
gr_minus <- rtracklayer::import(bw_minus, format = "BigWig")
gr_plus  <- rtracklayer::import(bw_plus,  format = "BigWig")
gr_comb  <- c(gr_minus, gr_plus)                    # GRanges + GRanges -> GRanges
GenomicRanges::reduce(gr_comb, ignore.strand = TRUE) # merge overlaps
}
# 3) import each sample
mcf7   <- import_bw_pair(mcf7_bw)
mcf10a <- import_bw_pair(mcf10a_bw)
# 4) quick QC + save
qc <- tibble(
sample = c("MCF7","MCF10A"),
n_regions = c(length(mcf7), length(mcf10a)),
median_width = c(median(width(mcf7)), median(width(mcf10a)))
)
dir.create("data/processed", recursive = TRUE, showWarnings = FALSE)
saveRDS(mcf7,   "data/processed/mcf7_granges.rds")
saveRDS(mcf10a, "data/processed/mcf10a_granges.rds")
write_csv(qc, "data/processed/groseq_qc_summary.csv")
cat("✅ BigWig import complete — wrote data/processed/*.rds and groseq_qc_summary.csv\n")
# import the second sample too
mcf10a <- import_bw_pair(mcf10a_bw)
# quick QC + save files
qc <- tibble(
sample = c("MCF7","MCF10A"),
n_regions = c(length(mcf7), length(mcf10a)),
median_width = c(median(width(mcf7)), median(width(mcf10a)))
)
dir.create("data/processed", recursive = TRUE, showWarnings = FALSE)
saveRDS(mcf7,   "data/processed/mcf7_granges.rds")
saveRDS(mcf10a, "data/processed/mcf10a_granges.rds")
readr::write_csv(qc, "data/processed/groseq_qc_summary.csv")
cat("✅ BigWig import complete — wrote data/processed/*.rds and groseq_qc_summary.csv\n")
# import the second sample
mcf10a <- import_bw_pair(mcf10a_bw)
# quick QC and save outputs
qc <- tibble(
sample       = c("MCF7","MCF10A"),
n_regions    = c(length(mcf7), length(mcf10a)),
median_width = c(median(width(mcf7)), median(width(mcf10a)))
)
dir.create("data/processed", recursive = TRUE, showWarnings = FALSE)
saveRDS(mcf7,   "data/processed/mcf7_granges.rds")
saveRDS(mcf10a, "data/processed/mcf10a_granges.rds")
readr::write_csv(qc, "data/processed/groseq_qc_summary.csv")
cat("✅ BigWig import complete — wrote data/processed/*.rds and groseq_qc_summary.csv\n")
dir.create("data/processed", recursive = TRUE, showWarnings = FALSE)
saveRDS(mcf7,   "data/processed/mcf7_granges.rds")
saveRDS(mcf10a, "data/processed/mcf10a_granges.rds")
dir.create("data/processed", recursive = TRUE, showWarnings = FALSE)
saveRDS(mcf7,   "data/processed/mcf7_granges.rds")
saveRDS(mcf10a, "data/processed/mcf10a_granges.rds")
file.exists("data/processed/mcf7_granges.rds")
file.exists("data/processed/mcf10a_granges.rds")
list.files("data/processed", full.names = TRUE)
library(groHMM); library(GenomicRanges); library(rtracklayer)
# paths used by your GroHMM script
mcf7_path   <- "data/processed/mcf7_granges.rds"
mcf10a_path <- "data/processed/mcf10a_granges.rds"
source("scripts/03_grohmm_calls.R")
library(groHMM)
library(rtracklayer)
library(GenomicRanges)
load_cov_from_bw <- function(dir_path){
bw_minus <- list.files(dir_path, pattern = "minus.*\\.bw$", full.names = TRUE, ignore.case = TRUE)
bw_plus  <- list.files(dir_path, pattern = "plus.*\\.bw$",  full.names = TRUE, ignore.case = TRUE)
gr_minus <- import(bw_minus, format = "BigWig")
gr_plus  <- import(bw_plus,  format = "BigWig")
# use the signal in the BigWigs
coverage(c(gr_minus, gr_plus), weight = "score")
}
cov_mcf7   <- load_cov_from_bw("data/GROseq/MCF7")
# Make sure the function is in memory first (re-run if needed)
load_cov_from_bw <- function(dir_path){
bw_minus <- list.files(dir_path, pattern = "minus.*\\.bw$", full.names = TRUE, ignore.case = TRUE)
bw_plus  <- list.files(dir_path, pattern = "plus.*\\.bw$",  full.names = TRUE, ignore.case = TRUE)
gr_minus <- rtracklayer::import(bw_minus, format = "BigWig")
gr_plus  <- rtracklayer::import(bw_plus,  format = "BigWig")
coverage(c(gr_minus, gr_plus), weight = "score")
}
# IMPORTANT: the paths must be quoted strings
cov_mcf7   <- load_cov_from_bw("data/GROseq/MCF7")
# Save outputs (RDS + BED)
dir.create("data/processed", recursive = TRUE, showWarnings = FALSE)
saveRDS(calls_mcf7,   "data/processed/grohmm_calls_mcf7.rds")
# Core libs
library(groHMM)
library(rtracklayer)
library(GenomicRanges)
# Memory-safe loader: read BigWigs as RleList and sum strands
load_cov_from_bw <- function(dir_path){
bw_minus <- list.files(dir_path, pattern = "minus.*\\.bw$", full.names = TRUE, ignore.case = TRUE)
bw_plus  <- list.files(dir_path, pattern = "plus.*\\.bw$",  full.names = TRUE, ignore.case = TRUE)
if (length(bw_minus) != 1 || length(bw_plus) != 1)
stop("Expected exactly one minus and one plus BigWig in: ", dir_path)
cov_minus <- import(bw_minus, as = "RleList")
cov_plus  <- import(bw_plus,  as = "RleList")
common <- intersect(names(cov_minus), names(cov_plus))
cov_minus[common] + cov_plus[common]   # RleList (coverage) returned
}
cov_mcf7   <- load_cov_from_bw("data/GROseq/MCF7")
cov_mcf10a <- load_cov_from_bw("data/GROseq/MCF10A")
# sanity check: these should both be RleList
class(cov_mcf7); class(cov_mcf10a)
cov_mcf7   <- load_cov_from_bw("data/GROseq/MCF7")
cov_mcf10a <- load_cov_from_bw("data/GROseq/MCF10A")
# quick check (should both be RleList)
class(cov_mcf7); class(cov_mcf10a)
library(groHMM)
thr     <- 2
max_len <- 50000L
win_sz  <- 50L   # conservative to avoid errors
calls_mcf7   <- detectTranscripts(cov_mcf7,   threshold = thr, maxLen = max_len, windowSize = win_sz)
# 1) Build coverage objects (RleList)
cov_mcf7   <- load_cov_from_bw("data/GROseq/MCF7")
cov_mcf10a <- load_cov_from_bw("data/GROseq/MCF10A")
# quick sanity check
class(cov_mcf7); class(cov_mcf10a)
# 2) Detect transcripts with a small window
library(groHMM)
thr <- 2; max_len <- 50000L; win_sz <- 50L
calls_mcf7   <- detectTranscripts(cov_mcf7,   threshold = thr, maxLen = max_len, windowSize = win_sz)
thr     <- 2
max_len <- 50000L
win_sz  <- 50L  # small window to avoid crashes
# Run GroHMM (fixed arguments)
calls_mcf7 <- detectTranscripts(cov_mcf7, threshold = thr, maxLen = max_len, size = win_sz)
# Try a larger window size
thr     <- 2
max_len <- 50000L
win_sz  <- 200L      # <- bump from 50 to 200
calls_mcf7   <- detectTranscripts(cov_mcf7,   threshold = thr, maxLen = max_len, size = win_sz)
# lengths (in bases) of each chromosome’s coverage Rle
lens7  <- sapply(cov_mcf7, length)
lens10 <- sapply(cov_mcf10a, length)
# sanity view
summary(lens7); head(sort(lens7)); head(names(sort(lens7)))
summary(lens10)
# choose a window comfortably smaller than the shortest chromosome
win_sz <- max(10L, as.integer(min(lens7, lens10) / 1000))
win_sz
library(rtracklayer)
library(GenomicRanges)
library(groHMM)
# Safe loader: import GRanges, then coverage(weight="score"), then sum strands
load_cov_from_bw <- function(dir_path){
bw_minus <- list.files(dir_path, pattern = "minus.*\\.bw$", full.names = TRUE, ignore.case = TRUE)
bw_plus  <- list.files(dir_path, pattern = "plus.*\\.bw$",  full.names = TRUE, ignore.case = TRUE)
if (length(bw_minus) != 1 || length(bw_plus) != 1)
stop("Expected exactly one minus and one plus BigWig in: ", dir_path)
gr_minus <- import(bw_minus, format = "BigWig")  # GRanges with score
gr_plus  <- import(bw_plus,  format = "BigWig")
cov_minus <- coverage(gr_minus, weight = "score") # RleList per seqname
cov_plus  <- coverage(gr_plus,  weight = "score")
common <- intersect(names(cov_minus), names(cov_plus))
cov_minus[common] + cov_plus[common]
}
cov_mcf7   <- load_cov_from_bw("data/GROseq/MCF7")
cov_mcf10a <- load_cov_from_bw("data/GROseq/MCF10A")
cov_mcf7   <- load_cov_from_bw("data/GROseq/MCF7")
cov_mcf10a <- load_cov_from_bw("data/GROseq/MCF10A")
# Parameters for GroHMM
thr <- 2
max_len <- 50000L
win_sz <- 48129L  # from earlier calculation
# Run GroHMM transcript detection
calls_mcf7 <- detectTranscripts(
cov_mcf7,
threshold = thr,
maxLength = max_len,
windowSize = win_sz
)
library(rtracklayer)
library(GenomicRanges)
library(groHMM)
cov_mcf7 <- load_cov_from_bw("data/GROseq/MCF7")
library(rtracklayer)
library(GenomicRanges)
library(groHMM)
# Read minus/plus BigWigs, make per-chromosome coverage (RleList), sum strands
load_cov_from_bw <- function(dir_path){
bw_minus <- list.files(dir_path, pattern = "minus.*\\.bw$", full.names = TRUE, ignore.case = TRUE)
bw_plus  <- list.files(dir_path, pattern = "plus.*\\.bw$",  full.names = TRUE, ignore.case = TRUE)
if (length(bw_minus) != 1 || length(bw_plus) != 1)
stop("Expected exactly one minus and one plus BigWig in: ", dir_path)
gr_minus <- import(bw_minus, format = "BigWig")
gr_plus  <- import(bw_plus,  format = "BigWig")
cov_minus <- coverage(gr_minus, weight = "score")
cov_plus  <- coverage(gr_plus,  weight = "score")
common <- intersect(names(cov_minus), names(cov_plus))
cov_minus[common] + cov_plus[common]
}
# Build coverage (takes a little time)
cov_mcf7   <- load_cov_from_bw("data/GROseq/MCF7")
cov_mcf10a <- load_cov_from_bw("data/GROseq/MCF10A")
thr     <- 2L
max_len <- 50000L
win_sz  <- 48129L   # from your earlier calculation
calls_mcf7 <- detectTranscripts(
reads      = cov_mcf7,
threshold  = thr,
maxLength  = max_len,
winSize    = win_sz
)
# Re-run GroHMM transcript detection with correct argument
calls_mcf7 <- detectTranscripts(
reads      = cov_mcf7,
threshold  = thr,
maxLength  = max_len,
winSize    = win_sz
)
thr      <- 2L
win_sz   <- 200L     # small window that won’t blow RAM
max_len  <- 50000L
calls_mcf7  <- detectTranscripts(
reads    = cov_mcf7,
threshold= thr,
winSize  = win_sz,
maxLen   = max_len
)
library(groHMM)
library(S4Vectors)   # for lengths()
## 1) pick conservative params
thr      <- 2L
max_len  <- 50000L
win_sz   <- 100L    # start small; we can increase later
## 2) keep only standard chromosomes and drop short contigs
std_chr <- paste0("chr", c(1:22, "X", "Y"))
# filter function for a coverage RleList
filter_cov <- function(x, win){
keep <- names(x)
# keep standard chromosomes if present; otherwise keep whatever overlaps
if (length(intersect(keep, std_chr)) > 0) keep <- intersect(keep, std_chr)
x <- x[keep]
# drop any seqs shorter than the window
x <- x[lengths(x) >= win]
x
}
cov_mcf7  <- filter_cov(cov_mcf7,  win_sz)
cov_mcf10a<- filter_cov(cov_mcf10a, win_sz)
## quick sanity check (all >= win_sz)
stopifnot(all(lengths(cov_mcf7)  >= win_sz),
all(lengths(cov_mcf10a)>= win_sz))
## 3) run GroHMM with the correct arg names
calls_mcf7 <- detectTranscripts(
reads     = cov_mcf7,
strand    = "+",
windowSize= win_sz,
threshold = thr,
maxLen    = max_len
)
## 1) Make sure groHMM is loaded
library(groHMM)
## 2) (Optional) if a variable named `strand` exists, remove it
if (exists("strand", inherits = FALSE)) rm(strand)
## 3) Run detectTranscripts by **position**, not by name
##    order: reads, strand, windowSize, threshold, maxLen
thr     <- 2L
max_len <- 50000L
win_sz  <- 100L   # you already filtered cov_* to >= 100 bp
calls_mcf7   <- groHMM::detectTranscripts(cov_mcf7,   "+", win_sz, thr, max_len)
## 0) Clean up objects with the old shape (optional but helps)
rm(list = c("cov_mcf7", "cov_mcf10a", "calls_mcf7", "calls_mcf10a"), envir = .GlobalEnv)
library(rtracklayer)
library(GenomicRanges)
library(groHMM)
## 1) Loader that returns *both* strands as RleLists
load_stranded_cov <- function(dir_path){
bw_minus <- list.files(dir_path, pattern = "minus.*\\.bw$", full.names = TRUE, ignore.case = TRUE)
bw_plus  <- list.files(dir_path, pattern = "plus.*\\.bw$",  full.names = TRUE, ignore.case = TRUE)
if (length(bw_minus) != 1 || length(bw_plus) != 1)
stop("Expected exactly one minus and one plus BigWig in: ", dir_path)
gr_minus <- import(bw_minus, format = "BigWig")
gr_plus  <- import(bw_plus,  format = "BigWig")
cov_minus <- coverage(gr_minus, weight = "score")  # SimpleRleList
cov_plus  <- coverage(gr_plus,  weight = "score")
## Keep only chromosomes present in both
common <- intersect(names(cov_minus), names(cov_plus))
list(plus = cov_plus[common], minus = cov_minus[common])
}
## 2) Build stranded coverages (takes a minute)
reads_mcf7   <- load_stranded_cov("data/GROseq/MCF7")
reads_mcf10a <- load_stranded_cov("data/GROseq/MCF10A")
## Quick sanity: these should be lists with two SimpleRleLists inside
stopifnot(is.list(reads_mcf7),   all(c("plus","minus") %in% names(reads_mcf7)))
stopifnot(is.list(reads_mcf10a), all(c("plus","minus") %in% names(reads_mcf10a)))
## 3) Conservative parameters
thr     <- 2L
max_len <- 50000L
win_sz  <- 100L
## 4) Detect transcripts on the + strand (use "-" for the other strand)
calls_mcf7_plus   <- groHMM::detectTranscripts(reads_mcf7,   "+", win_sz, thr, max_len)
## Use the per-strand coverage RleList
str(reads_mcf7, max.level = 1)   # should show a list with $plus and $minus
thr     <- 2L
max_len <- 50000L
win_sz  <- 100L
## Detect on the + strand
calls_mcf7_plus   <- groHMM::detectTranscripts(reads_mcf7$plus,   "+", win_sz, thr, max_len)
